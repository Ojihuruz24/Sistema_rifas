@page "/checkout"
@using MudBlazor
@using SIMRIFA.Logic.Tools;
@using SIMRIFA.Tools.ConexionFrontBackend;
@inject NavigationManager Navigation
@inject IJSRuntime JS


<MudDialog>
	<DialogContent>
		<MudText Align="Align.Center"><h2><b>CONFIRMAR</b></h2></MudText>
		<MudText Align="Align.Center"><h4>Compra de <b>@Cupones</b> cupones.</h4></MudText>
		<MudText Align="Align.Center"><h4>por valor de <b> $ @ValorCupones</b></h4></MudText>

		@*Compra de @Boletas boletas por valor de $ @ValorBoletas*@
	</DialogContent>
	<DialogActions>
		<form action="https://checkout.wompi.co/p/" method="get">
			<!-- OBLIGATORIOS -->
			<input type="hidden" name="public-key" @bind="PublicKey" />
			<input type="hidden" name="currency" @bind="Currency" />
			<input type="hidden" name="amount-in-cents" @bind="AmountInCents" />
			<input type="hidden" name="reference" @bind="Reference" />
			<input type="hidden" name="signature:integrity" @bind="SignatureIntegrity" />
			<input type="hidden" name="redirect-url" @bind="RedirectUrl" />
			<input type="hidden" name="expiration-time" @bind="ExpirationTime" />
			<!-- OPCIONALES -->
			@*<button type="submit">Pagar con Wompi SALIENDO DE LA PAGINA</button>*@
			<MudButton Size="Size.Large" OnClick="Cancel" Color="Color.Error" StartIcon="@Icons.Material.Filled.Cancel" DisableElevation="true">CANCELAR</MudButton>
			<MudButton Size="Size.Large" ButtonType="ButtonType.Submit" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ShoppingCart" DisableElevation="true">CONFIRMAR</MudButton>
			@*<button onclick="@SubmitForm" type="submit">Pagar con Wompi SALIENDO DE LA PAGINA</button>*@
		</form>
	</DialogActions>
</MudDialog>


@*
<h3>Checkout con Wompi</h3>

<button @onclick="InitiatePayment">Pagar con Wompi SIN SALIR DE LA PAGINA</button>*@


@code {

	private string PublicKey { get; set; }
	private string Currency { get; set; }
	private int AmountInCents { get; set; }
	private string Reference { get; set; }
	private string SignatureIntegrity { get; set; }
	private string RedirectUrl { get; set; }
	private string ExpirationTime { get; set; }
	private int TaxInCentsVat { get; set; }
	#region
	[Inject]
	IUtilisLogic _utils { get; set; }

	[Inject] IJSRuntime Js { get; set; }

	[Parameter]
	public int Cupones { get; set; }
	[Parameter]
	public int ValorCupones { get; set; }

	#endregion

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	void Cancel() => MudDialog.Cancel();

	protected override async void OnInitialized()
	{
		int casteo = AddTrailingZeros(ValorCupones, 2);
		ExpirationTime = DateTime.UtcNow.AddMinutes(5).ToString("yyyy-MM-ddTHH:mm:ss.fffZ");

		(string, string) prueba = await _utils.has(AddTrailingZeros(ValorCupones, 2), Cupones, ExpirationTime);
		PublicKey = "pub_test_EKiDBdydoVychiwazPqDsm52168IjGmQ";
		Currency = "COP";
		AmountInCents = casteo;
		Reference = prueba.Item1;
		SignatureIntegrity = prueba.Item2;
		RedirectUrl = "https://localhost:7297/";
	}

	public int AddTrailingZeros(int number, int minZeros)
	{
		var result = Convert.ToInt32(number.ToString().PadRight(number.ToString().Length + minZeros, '0'));

		return result;

		//return number.ToString().PadRight(number.ToString().Length + minZeros, '0');
	}
}
