@using MudBlazor
@using SIMRIFA.Componentes.Rifas.Wompi;
@using SIMRIFA.Model.Models.Wompi;
@using SIMRIFA.Logic.SerieLogic;
@using SIMRIFA.Logic.Tools;
@using System.Text;
@using SIMRIFA.Service.Wompi;
@inject IDialogService Dialog;
@inject NavigationManager Navigation;
@using SIMRIFA.Componentes.Rifas.Adiccion;

<br />
<br />

<h1 class="container py-4 px-3 mx-auto text-center display-2" style="color:dodgerblue">
	<b>SOAT - tecnomecanica - moto 0km - licencia de conduccion</b>
</h1>

<MudImage class="rounded mx-auto d-block border border-primary border-5" Fluid="true" Height="400" Width="400" ObjectFit="ObjectFit.Cover" Src="/img/rifa_cupones.png" Alt="SOAT" Elevation="0" />

<h2 class="container py-4 px-3 mx-auto text-center display-2" style="color:dodgerblue">
	<b>Cupones redimibles en</b>
</h2>

<AliadosCupones></AliadosCupones>

<MudGrid Justify="Justify.Center">
	<MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
		<MudText Align="Align.Center">
			<h2 class="container py-4 px-3 mx-auto text-center display-2" style="color:dodgerblue">
				<b>INCREIBLE!!!</b>
			</h2>
			<MudProgressLinear Color="Color.Info" Striped="true" Size="Size.Large" Value="@vendidas"
							   Class="d-flex align-center justify-center mud-width-full py-8" Min="1" Max="@ValorMaximo">
				<MudText Typo="Typo.subtitle1" Color="Color.Dark">
					<b>@Porcentaje %</b>
				</MudText>
			</MudProgressLinear>

		</MudText>
	</MudItem>
</MudGrid>
<br />

<MudGrid Justify="Justify.Center">

	<MudItem xs="@xs" sm="@sm" md="@md" lg="@lg" xl="@xl" xxl="@xxl">
		<MudCard Style="border:groove;border-color:red">
			<MudImage Fluid="true" Src="@urlImageCupones1" Alt="Rifa finalizada" Class="rounded-lg" />
			<MudCardActions>
				<MudButton Variant="Variant.Filled" Class="py-4 px-6 mx-4 rounded-pill" Color="Color.Primary" OnClick="(() => Comprar(2,10000))"
						   FullWidth="true" Disabled="@EstadoButton">COMPRAR 2 CUPONES POR 10.000</MudButton>
			</MudCardActions>
		</MudCard>
	</MudItem>

	<MudItem xs="@xs" sm="@sm" md="@md" lg="@lg" xl="@xl" xxl="@xxl">
		<MudCard Style="border:groove;border-color:red">
			<div class="d-flex justify-center">
				<MudImage Fluid="true" Src="@urlImageCupones1" Alt="Rifa finalizada" Class="rounded-lg" />
			</div>
			<MudCardActions>
				<MudButton Variant="Variant.Filled" Class="py-4 px-6 mx-4 rounded-pill" OnClick="(() => Comprar(4,20000))"
						   FullWidth="true" Disabled="@EstadoButton">COMPRAR 4 CUPONES POR 20.000</MudButton>
			</MudCardActions>
		</MudCard>
	</MudItem>

	<MudItem xs="@xs" sm="@sm" md="@md" lg="@lg" xl="@xl" xxl="@xxl">
		<MudCard Style="border:groove;border-color:red">
			<div class="d-flex justify-center">
				<MudImage Fluid="true" Src="@urlImageCupones1" Alt="Rifa finalizada" Class="rounded-lg" />
			</div>
			<MudCardActions>
				<MudButton Variant="Variant.Filled" Class="py-4 px-6 mx-4 rounded-pill" OnClick="(() => Comprar(6,30000))"
						   FullWidth="true" Disabled="@EstadoButton">COMPRAR 6 CUPONES POR 30.0000</MudButton>
			</MudCardActions>
		</MudCard>
	</MudItem>

	<MudItem xs="@xs" sm="@sm" md="@md" lg="@lg" xl="@xl" xxl="@xxl">
		<MudCard Style="border:groove;border-color:red">
			<MudImage Fluid="true" Src="@urlImageCupones1" Alt="Rifa finalizada" Class="rounded-lg" />
			<MudCardActions>
				<MudButton Variant="Variant.Filled" Class="py-4 px-6 mx-4 rounded-pill" OnClick="(() => Comprar(8,40000))"
						   FullWidth="true" Disabled="@EstadoButton">COMPRAR 8 CUPONES POR 40.0000</MudButton>
			</MudCardActions>
		</MudCard>
	</MudItem>


	<MudGrid Justify="Justify.Center">
		<MudItem xs="@xl" sm="@xl" md="@xl" lg="@xl" xl="@xl" xxl="@xl">
			<MudNumericField @bind-Value="@cantidadVenta" HideSpinButtons="false" Label="CANTIDAD" Variant="Variant.Filled" Min="1" Max="20" />
			<br />
			<MudButton Variant="Variant.Filled" Class="py-4 px-6 mx-4 rounded-pill" FullWidth="true" OnClick="CompraCantidad">COMPRAR</MudButton>
		</MudItem>
	</MudGrid>
</MudGrid>

@code {

	private int xs = 12;
	private int sm = 6;
	private int md = 4;
	private int lg = 3;
	private int xl = 3;
	private int xxl = 3;


	private string urlImageOne = "Img/comboOne.png";
	private string urlImageTwho = "Img/comboTwo.png";
	private string urlImageTrhe = "Img/comboThre.png";
	private string urlImageCupones1 = "Img/Cupon1.png";
	private string urlImageCupones2 = "Img/Cupon2.png";

	private bool EstadoButton = false;
	private int ValorMaximo = 1;

	private decimal Porcentaje { get; set; } = 0;
	private int vendidas { get; set; }

	private int cantidadVenta { get; set; } = 1;

	[Inject]
	private IWompiService wompiService { get; set; }

	[Inject]
	private ISerieLogicService serieService { get; set; }

	[Inject]
	IUtilisLogic _utils { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var series = await serieService.ObtenerSerieActiva();
		var result = series.FirstOrDefault();

		int margen = result.Margen == null ? 0 : (int)result.Margen;

		ValorMaximo = result.NumeroMaximo - margen;
		vendidas = result.Contador;
		Porcentaje = _utils.Calcular(vendidas, ValorMaximo);
	}

	protected override async void OnAfterRender(bool firstRender)
	{
		await OpenDialog();

		Porcentaje = _utils.Calcular(vendidas, ValorMaximo);

		base.OnAfterRender(firstRender);
	}

	public async void Comprar(int cantidad, int valor)
	{
		await OpenDialog();
		await OpenPagosDialog(cantidad, valor);

	}

	public async void CompraOne()
	{
		await OpenDialog();

		await OpenPagosDialog(3, 1400000);

	}

	public async void CompraTwo()
	{
		await OpenDialog();
	}

	public async void CompraThre()
	{
		await OpenDialog();

		await OpenPagosDialog(5, 4700000);
	}

	public async void CompraCantidad()
	{
		await OpenDialog();
		vendidas += cantidadVenta;
		var valorWompi = cantidadVenta * 500000;
		var valor = cantidadVenta * 500000;
		await OpenPagosDialog(cantidadVenta, valorWompi);
	}

	private async Task OpenPagosDialog(int boletas, int valor)
	{
		DialogOptions disableBackdropClick = new DialogOptions()
			{
				MaxWidth = MaxWidth.Medium,
				Position = DialogPosition.Center,
				FullWidth = false,
			};


		var parameters = new DialogParameters<PaymentForm>();
		parameters.Add(x => x.Cupones, boletas);
		parameters.Add(x => x.ValorCupones, valor);

		var dialog = await Dialog.ShowAsync<PaymentForm>(string.Empty, parameters, disableBackdropClick);

		var result = await dialog.Result;

		if (!result.Canceled)
		{
			//In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
			Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
			// se ltransacion ha sido cancelada
		}
	}

	private async Task OpenDialog()
	{
		if (vendidas >= ValorMaximo)
		{
			DialogOptions disableBackdropClick = new DialogOptions()
				{
					DisableBackdropClick = true,
					MaxWidth = MaxWidth.Medium,
					Position = DialogPosition.Center,
					FullWidth = true
				};

			Dialog.Show<CierreVentas>(string.Empty, disableBackdropClick);
		}
	}

}